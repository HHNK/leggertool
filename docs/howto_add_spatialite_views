In QGIS, the database spatialite .*.sqlite contains multiple tables with original (non-redundant) data, but also
tables that are considered "views".
In "views", several original tables in de spatialite can be combined without generating new data.
These "views" are an attractive feature because this way variables that are spread over different tables
can be combined into one table to create a functional "view".

Behind a "view" is an SQL query that refreshes continuously. So although it looks like a static table, what
actually happens is dat an SQL query is send constantly to the different tables to create a "view".
A "view" generally only has read abilities (no write option).

In the leggertool, in this qgis / spatialite version, when a connection is made with a spatialite, it often is not
clear which tables contain original data and which only contain "views".
By selecting the following tables, the "views" can be found:
views_geometry_columns

In legger.sql_models.legger_views.py the python code to make the views in spatialite is programmed with SQL Alchemy.
a "session" (with the spatialite of the legger) is passed inside the definition of "create_legger_views".
Then generally a couple steps are taken:
1. First, the existing "view" is deleted. example:
session.execute(
        """
        DROP VIEW IF EXISTS hydroobjects_selected_legger;
        """
    )

2. Then an SQL query is constructed where the view is built. example:
    session.execute(
        """
            CREATE VIEW hydroobjects_selected_legger AS
            SELECT
                h.objectid,
                h.streefpeil,
                h.debiet,
                k.diepte,
                k.breedte,
                k.taludvoorkeur,
                v.verhang_bos_bijkerk as verhang,
                v.opmerkingen as profiel_opmerking,
                p.t_fit as fit_score,
                p.t_afst as offset,
            FROM hydroobject h
            JOIN kenmerken k ON h.id = k.hydro_id
            LEFT OUTER JOIN varianten v ON s.variant_id = v.id
            LEFT OUTER JOIN profielfiguren p ON v.id = p.profid
        """)

Constructing the right SQL query is best done in the DB Manager in QGIS.
- Click on the .*.sqlite where you want to add the view,
- Press SQL window and another widget opens up to try out new code.
- Once a suitable SQL query is found, this can be added to the Python code.

3. The table views_geometry_columns needs an update too. This table is always present in QGIS spatialite. In the
source code of QGIS this table plays a role, therefore this table needs to hold the information of the "view".
First the existing row with the view is deleted (if it exists), after it is added. example:

    session.execute(
        """
        DELETE FROM views_geometry_columns WHERE view_name = 'hydroobjects_selected_legger';
        """
    )

    session.execute(
        """
            INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name,
              f_geometry_column, read_only)
            VALUES('hydroobjects_selected_legger', 'geometry', 'objectid', 'hydroobject', 'geometry', 1);
        """)